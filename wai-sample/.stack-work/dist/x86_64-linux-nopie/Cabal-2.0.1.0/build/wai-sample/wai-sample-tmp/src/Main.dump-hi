
==================== FINAL INTERFACE ====================
2018-07-11 03:55:54.506068614 UTC

interface main:Main 8022
  interface hash: 7806081e0f0b3b8a218f74e3a59bfe46
  ABI hash: b3fb7daad1b9cb3fcd74cfda35ef6fc4
  export-list hash: 72b6abb3bd2c6a0143440027a654940e
  orphan hash: 5de10e4a21334b9179b5c35fc39df46b
  flag hash: b73c7b79f2d13372782a5bb1c548a9ed
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.app
  Main.main
  Main.MyAppState{Main.DummyAppState}
  Main.MySession{Main.EmptySession}
module dependencies:
package dependencies: Spock-0.12.0.0 Spock-core-0.12.0.0
                      StateVar-1.1.0.4 adjunctions-4.3 aeson-1.2.4.0
                      ansi-terminal-0.7.1.1 ansi-wl-pprint-0.6.8.2 appar-0.1.4
                      array-0.5.2.0 async-2.1.1.1 attoparsec-0.13.2.2
                      attoparsec-iso8601-1.0.0.0 auto-update-0.1.4 base-4.10.1.0
                      base-compat-0.9.3 base-orphans-0.6 base-prelude-1.2.0.1
                      base64-bytestring-1.0.0.1 basement-0.0.4 bifunctors-5.5.2
                      binary-0.8.5.1 blaze-builder-0.4.0.2 blaze-html-0.9.0.1
                      blaze-markup-0.8.2.0 byteorder-1.0.4 bytestring-0.10.8.2
                      call-stack-0.1.0 case-insensitive-1.2.0.11 charset-0.3.7.1
                      colour-2.3.4 comonad-5.0.3 containers-0.5.10.2 contravariant-1.4.1
                      cookie-0.4.4 cryptonite-0.24 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 directory-1.3.0.2 distributive-0.5.3 dlist-0.8.0.4
                      double-conversion-2.0.2.0 ede-0.2.8.7 exceptions-0.8.3
                      filepath-1.4.1.2 fingertree-0.1.3.1 focus-0.1.5.2 free-4.12.4
                      ghc-boot-th-8.2.2 ghc-prim-0.5.1.1 hashable-1.2.7.0
                      http-api-data-0.3.7.2 http-date-0.0.6.1 http-types-0.9.1
                      http2-1.6.3 hvect-0.4.0.0 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2.1 iproute-1.7.3 kan-extensions-5.0.2
                      lens-4.15.4 lifted-base-0.2.3.12 list-t-1.0.0.1 memory-0.14.11
                      mmorph-1.1.1 monad-control-1.0.2.3 mtl-2.2.2 network-2.6.3.4
                      parsec-3.1.13.0 parsers-0.12.8 prelude-extras-0.4.0.3
                      pretty-1.1.3.3 primitive-0.6.3.0 profunctors-5.2.2 psqueues-0.2.6.0
                      random-1.1 reducers-3.12.2 reflection-2.1.3 reroute-0.4.1.0
                      resource-pool-0.2.3.2 resourcet-1.1.11 scientific-0.3.5.3
                      semigroupoids-5.2.1 simple-sendfile-0.2.27 stm-2.4.5.0
                      stm-containers-0.2.16 streaming-commons-0.1.19 stringsearch-0.3.6.6
                      superbuffer-0.3.1.1 tagged-0.8.5 template-haskell-2.12.0.0
                      text-1.2.2.2 text-format-0.3.1.1 text-manipulate-0.2.0.1
                      th-abstraction-0.2.6.0 time-1.8.0.2 time-locale-compat-0.1.1.3
                      transformers-0.5.2.0 transformers-base-0.4.4
                      transformers-compat-0.5.1.4 trifecta-1.7.1.1 unix-2.7.2.2
                      unix-compat-0.5.0.1 unliftio-core-0.1.1.0
                      unordered-containers-0.2.8.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vault-0.3.1.0 vector-0.12.0.1 wai-3.2.1.1 wai-extra-3.0.22.0
                      warp-3.2.18 word8-0.1.3
orphans: Spock-0.12.0.0:Web.Spock.Internal.Monad
         basement-0.0.4:Basement.UArray.Base basement-0.0.4:Basement.Block
         network-2.6.3.4:Network.Socket
         stm-containers-0.2.16:STMContainers.Map
         reflection-2.1.3:Data.Reflection stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         colour-2.3.4:Data.Colour text-1.2.2.2:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: Spock-0.12.0.0:Web.Spock.Internal.Monad
                         Spock-0.12.0.0:Web.Spock.Internal.SessionVault
                         Spock-0.12.0.0:Web.Spock.Internal.Types
                         Spock-core-0.12.0.0:Web.Spock.Internal.Wire
                         adjunctions-4.3:Data.Functor.Rep
                         aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats basement-0.0.4:Basement.Block.Base
                         basement-0.0.4:Basement.Monad
                         basement-0.0.4:Basement.MutableBuilder basement-0.0.4:Basement.Nat
                         basement-0.0.4:Basement.NonEmpty
                         basement-0.0.4:Basement.Numerical.Subtractive
                         basement-0.0.4:Basement.String
                         basement-0.0.4:Basement.String.Encoding.ASCII7
                         basement-0.0.4:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.4:Basement.String.Encoding.UTF16
                         basement-0.0.4:Basement.String.Encoding.UTF32
                         basement-0.0.4:Basement.Types.OffsetSize
                         basement-0.0.4:Basement.UArray.Base
                         basement-0.0.4:Basement.UTF8.Base
                         bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Fix
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         iproute-1.7.3:Data.IP.Addr iproute-1.7.3:Data.IP.Range
                         kan-extensions-5.0.2:Data.Functor.Day
                         kan-extensions-5.0.2:Data.Functor.Yoneda
                         lens-4.15.4:Control.Lens.At
                         lens-4.15.4:Control.Lens.Internal.Indexed
                         lens-4.15.4:Control.Lens.Reified lens-4.15.4:Control.Lens.Tuple
                         lens-4.15.4:Control.Lens.Wrapped lens-4.15.4:Control.Lens.Zoom
                         list-t-1.0.0.1:ListT
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Rep
                         resourcet-1.1.11:Control.Monad.Trans.Resource.Internal
                         stm-containers-0.2.16:STMContainers.Map tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         th-abstraction-0.2.6.0:Language.Haskell.TH.Datatype
                         trifecta-1.7.1.1:Text.Trifecta.Delta
                         trifecta-1.7.1.1:Text.Trifecta.Rendering
                         trifecta-1.7.1.1:Text.Trifecta.Rope
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Spock-0.12.0.0:Web.Spock e9fb12f3f307a3e8c61b6e01ff5ae257
import  -/  Spock-0.12.0.0:Web.Spock.Config 0c3d1e8446eed7a8f81e09669c037227
import  -/  Spock-0.12.0.0:Web.Spock.Internal.Types 2bc0ab95f578fc7c2d8424bf7c179dc8
import  -/  Spock-core-0.12.0.0:Web.Spock.Core 797f1482919ca85ee9246544efabd87d
import  -/  Spock-core-0.12.0.0:Web.Spock.Internal.CoreAction af6f87332796b1e09864d8138fac99e8
import  -/  base-4.10.1.0:Control.Monad.IO.Class 9d78cd0f73a837f3c00753bd212b9f2c
import  -/  base-4.10.1.0:Data.IORef 27e590a10ae158b4075a28a9902178b2
import  -/  base-4.10.1.0:Data.Monoid c0108b166e27f747671c7fe4ffb11019
import  -/  base-4.10.1.0:GHC.IORef fcf9a9efa120217c33e71b5dc4a08e1f
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ede-0.2.8.7:Text.EDE 8e2d39603c65718f5bc5d052e93eea93
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  mtl-2.2.2:Control.Monad.Trans cd1e71195681b00f5e271ed8bc3105bc
import  -/  reroute-0.4.1.0:Web.Routing.Combinators dedb72fcc6011213920a28258203300e
import  -/  text-1.2.2.2:Data.Text 179ed20f3e41d2270f9a36dd7f638215
2fcf4ca1d5ab829f2ad0e00ccbcc795b
  $s$fMonadIOWebStateT ::
    Control.Monad.IO.Class.MonadIO
      (Web.Spock.Internal.Types.WebStateT
         conn
         sess
         st
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ conn @ sess @ st.
                  @ (Web.Spock.Internal.Types.WebStateT
                       conn
                       sess
                       st
                       (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
                  (Web.Spock.Internal.Monad.$fHasSpockt_$s$fMonadWebStateT
                     @ conn
                     @ sess
                     @ st)
                  (\ @ a (x :: GHC.Types.IO a) ->
                   let {
                     m1 :: GHC.IORef.IORef
                             Control.Monad.Trans.Resource.Internal.ReleaseMap
                           -> GHC.Types.IO a
                       {- Arity: 1 -}
                     = \ (ds :: GHC.IORef.IORef
                                  Control.Monad.Trans.Resource.Internal.ReleaseMap) ->
                       x
                   } in
                   (\ (ds :: Web.Spock.Internal.Types.WebState conn sess st) -> m1)
                     `cast`
                   (Trans
                        (<Web.Spock.Internal.Types.WebState conn sess st>_R
                         ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                       <GHC.Types.IO>_R <a>_N))
                        (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                  <*>_N
                                  <Web.Spock.Internal.Types.WebState conn sess st>_R
                                  <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                  <a>_N))))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                 <conn>_N
                                 <sess>_N
                                 <st>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                            GHC.Types.IO>_N <a>_N) -}
96798ff914bc167e79c6021652cd06d3
  $tc'DummyAppState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9435297752681913723##
                   12150800756213867456##
                   Main.$trModule
                   Main.$tc'DummyAppState2
                   0#
                   Main.$tc'DummyAppState1) -}
f770f7893972b693988f2eb7ede529ae
  $tc'DummyAppState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c87b2811311d98a6d315fbc0a9f5591d
  $tc'DummyAppState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'DummyAppState3) -}
66e8825bf40d43a8f1e8699e1643f70c
  $tc'DummyAppState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DummyAppState"#) -}
75ff1d5883f5dd99521752943b1e458a
  $tc'EmptySession :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   171059110116175407##
                   14463770562046297629##
                   Main.$trModule
                   Main.$tc'EmptySession2
                   0#
                   Main.$tc'EmptySession1) -}
d6c7819b2c56a3536a6f5439f1ded2d9
  $tc'EmptySession1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
25155909197ca4a4accc7e8a1841a2f9
  $tc'EmptySession2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'EmptySession3) -}
9bd4861fad1c27908d91f44b6d4e34e3
  $tc'EmptySession3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptySession"#) -}
959e9405576cdfb8c91fe5da19440411
  $tcMyAppState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1706869140410866551##
                   3427913441768950247##
                   Main.$trModule
                   Main.$tcMyAppState1
                   0#
                   GHC.Types.krep$*) -}
ac57dd3cc7c773f02bf386a461b0b55e
  $tcMyAppState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMyAppState2) -}
be0adca0681333042946e4c6be00a452
  $tcMyAppState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MyAppState"#) -}
cbcb2af6ac8cfdd5ee44f68fd6419e6a
  $tcMySession :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8162266588374263179##
                   4765574770074335077##
                   Main.$trModule
                   Main.$tcMySession1
                   0#
                   GHC.Types.krep$*) -}
14ca5ed887c0d4772df6f8896c7736e2
  $tcMySession1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcMySession2) -}
747f8ef085923c4cf50992b2db8d29a7
  $tcMySession2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MySession"#) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
56e704d49546ba1fc0169034dfdd1e8d
  $wm1 ::
    Web.Spock.Internal.Wire.ResponseState
    -> Web.Spock.Internal.Types.WebStateT
         ()
         Main.MySession
         Main.MyAppState
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
         (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
          Web.Spock.Internal.Wire.ResponseState, ())
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Web.Spock.Internal.Wire.ResponseState) ->
                 let {
                   m1 :: Web.Spock.Internal.Types.WebStateM
                           ()
                           Main.MySession
                           Main.MyAppState
                           (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                            Web.Spock.Internal.Wire.ResponseState, ())
                   = Web.Spock.Internal.CoreAction.$wsetRawHeaderUnsafe
                       @ (Web.Spock.Internal.Types.WebStateM
                            () Main.MySession Main.MyAppState)
                       @ ()
                       (Main.$s$fMonadIOWebStateT @ () @ Main.MySession @ Main.MyAppState)
                       Main.app17
                       Main.app_m4
                       w
                 } in
                 (\ (r1 :: Web.Spock.Internal.Types.WebState
                             () Main.MySession Main.MyAppState) ->
                  let {
                    ds :: Control.Monad.Trans.Resource.Internal.ResourceT
                            GHC.Types.IO
                            (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                             Web.Spock.Internal.Wire.ResponseState, ())
                    = m1
                        `cast`
                      (Trans
                           (Web.Spock.Internal.Types.N:WebStateT[0]
                                <()>_N
                                <Main.MySession>_N
                                <Main.MyAppState>_N <Control.Monad.Trans.Resource.Internal.ResourceT
                                                       GHC.Types.IO>_N <(Data.Either.Either
                                                                           Web.Spock.Internal.Wire.ActionInterupt
                                                                           (),
                                                                         Web.Spock.Internal.Wire.ResponseState,
                                                                         ())>_N)
                           (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Web.Spock.Internal.Types.WebState
                                   () Main.MySession Main.MyAppState>_R
                                <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                  Web.Spock.Internal.Wire.ResponseState, ())>_N))
                        r1
                  } in
                  (\ (r2 :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Trans
                              (Nth:2
                                   (Trans
                                        (<Control.Monad.Trans.Resource.Internal.ResourceT
                                            GHC.Types.IO
                                            (Data.Either.Either
                                               Web.Spock.Internal.Wire.ActionInterupt (),
                                             Web.Spock.Internal.Wire.ResponseState, ())>_R
                                         ->_R <(Data.Either.Either
                                                  Web.Spock.Internal.Wire.ActionInterupt (),
                                                Web.Spock.Internal.Wire.ResponseState, ())
                                               -> Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO
                                                    (Data.Either.Either
                                                       Web.Spock.Internal.Wire.ActionInterupt (),
                                                     Web.Spock.Internal.Wire.ResponseState, ())>_R
                                         ->_R Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                  <GHC.Types.IO>_R
                                                  <(Data.Either.Either
                                                      Web.Spock.Internal.Wire.ActionInterupt (),
                                                    Web.Spock.Internal.Wire.ResponseState, ())>_N)
                                        (<Control.Monad.Trans.Resource.Internal.ResourceT
                                            GHC.Types.IO
                                            (Data.Either.Either
                                               Web.Spock.Internal.Wire.ActionInterupt (),
                                             Web.Spock.Internal.Wire.ResponseState, ())>_R
                                         ->_R <(Data.Either.Either
                                                  Web.Spock.Internal.Wire.ActionInterupt (),
                                                Web.Spock.Internal.Wire.ResponseState, ())
                                               -> Control.Monad.Trans.Resource.Internal.ResourceT
                                                    GHC.Types.IO
                                                    (Data.Either.Either
                                                       Web.Spock.Internal.Wire.ActionInterupt (),
                                                     Web.Spock.Internal.Wire.ResponseState, ())>_R
                                         ->_R <GHC.IORef.IORef
                                                 Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                                         ->_R GHC.Types.N:IO[0]
                                                  <(Data.Either.Either
                                                      Web.Spock.Internal.Wire.ActionInterupt (),
                                                    Web.Spock.Internal.Wire.ResponseState, ())>_R)))
                              (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                   <GHC.Types.IO>_R
                                   <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                     Web.Spock.Internal.Wire.ResponseState, ())>_N))
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                               Web.Spock.Internal.Wire.ResponseState, ())>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild { (,,) a1 s' w1 ->
                   case a1 of wild1 {
                     Data.Either.Left e1 -> (# ipv, (wild1, s', GHC.Tuple.()) #)
                     Data.Either.Right x6
                     -> (# ipv,
                           (Main.app15,
                            case s' of wild2 { Web.Spock.Internal.Wire.ResponseState ds2 ds3 ds4 ds5 ->
                            Web.Spock.Internal.Wire.ResponseState
                              ds2
                              ds3
                              ds4
                              Main.app_val4
                                `cast`
                              (Sym (Web.Spock.Internal.Wire.N:ResponseBody[0])) },
                            GHC.Tuple.()) #) } } })
                    `cast`
                  (Nth:3
                       (Nth:3
                            (Trans
                                 (<Control.Monad.Trans.Resource.Internal.ResourceT
                                     GHC.Types.IO
                                     (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                      Web.Spock.Internal.Wire.ResponseState, ())>_R
                                  ->_R <(Data.Either.Either
                                           Web.Spock.Internal.Wire.ActionInterupt (),
                                         Web.Spock.Internal.Wire.ResponseState, ())
                                        -> Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO
                                             (Data.Either.Either
                                                Web.Spock.Internal.Wire.ActionInterupt (),
                                              Web.Spock.Internal.Wire.ResponseState, ())>_R
                                  ->_R <GHC.IORef.IORef
                                          Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <(Data.Either.Either
                                                    Web.Spock.Internal.Wire.ActionInterupt (),
                                                  Web.Spock.Internal.Wire.ResponseState, ())>_R))
                                 (<Control.Monad.Trans.Resource.Internal.ResourceT
                                     GHC.Types.IO
                                     (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                      Web.Spock.Internal.Wire.ResponseState, ())>_R
                                  ->_R <(Data.Either.Either
                                           Web.Spock.Internal.Wire.ActionInterupt (),
                                         Web.Spock.Internal.Wire.ResponseState, ())
                                        -> Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO
                                             (Data.Either.Either
                                                Web.Spock.Internal.Wire.ActionInterupt (),
                                              Web.Spock.Internal.Wire.ResponseState, ())>_R
                                  ->_R Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                <GHC.Types.IO>_R
                                                <(Data.Either.Either
                                                    Web.Spock.Internal.Wire.ActionInterupt (),
                                                  Web.Spock.Internal.Wire.ResponseState,
                                                  ())>_N))))))
                   `cast`
                 (Trans
                      (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                <*>_N
                                <Web.Spock.Internal.Types.WebState
                                   () Main.MySession Main.MyAppState>_R
                                <Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO>_R
                                <(Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
                                  Web.Spock.Internal.Wire.ResponseState, ())>_N))
                      (Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                <()>_N
                                <Main.MySession>_N
                                <Main.MyAppState>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                                        GHC.Types.IO>_N <(Data.Either.Either
                                                                            Web.Spock.Internal.Wire.ActionInterupt
                                                                            (),
                                                                          Web.Spock.Internal.Wire.ResponseState,
                                                                          ())>_N))) -}
b40cd865f84fa3732068dc66ffded4d0
  data MyAppState = DummyAppState (GHC.IORef.IORef GHC.Types.Int)
3e68b764ce1183fde9c7e4c1f88d737d
  data MySession = EmptySession
f79eaccb8f80b932180b0543b0ebfa6d
  app :: Web.Spock.SpockM () Main.MySession Main.MyAppState ()
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U(U,U,U,U(U,U,U,U,U,U,U,U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.app1
                  `cast`
                (Trans
                     (<Web.Routing.SafeRouting.PathInternal '[]>_R
                      ->_R <Web.Routing.Router.RegistryState
                              (Web.Spock.Internal.Wire.ActionCtxT
                                 ()
                                 (Web.Spock.Internal.Types.WebStateT
                                    ()
                                    Main.MySession
                                    Main.MyAppState
                                    (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
                              ()
                              Web.Spock.Internal.Wire.SpockMethod>_R
                      ->_R Trans
                               (<Web.Spock.Core.LiftHooked
                                   ()
                                   (Web.Spock.Internal.Types.WebStateT
                                      ()
                                      Main.MySession
                                      Main.MyAppState
                                      (Control.Monad.Trans.Resource.Internal.ResourceT
                                         GHC.Types.IO))>_R
                                ->_R Trans
                                         (<Web.Spock.Internal.Types.WebState
                                             () Main.MySession Main.MyAppState>_R
                                          ->_R Trans
                                                   (<GHC.IORef.IORef
                                                       Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                                                    ->_R Sym (GHC.Types.N:IO[0]
                                                                  <((),
                                                                    Web.Routing.Router.RegistryState
                                                                      (Web.Spock.Internal.Wire.ActionCtxT
                                                                         ()
                                                                         (Web.Spock.Internal.Types.WebStateT
                                                                            ()
                                                                            Main.MySession
                                                                            Main.MyAppState
                                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                               GHC.Types.IO)))
                                                                      ()
                                                                      Web.Spock.Internal.Wire.SpockMethod,
                                                                    [Network.Wai.Application
                                                                     -> Network.Wai.Application])>_R))
                                                   (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                             <GHC.Types.IO>_R
                                                             <((),
                                                               Web.Routing.Router.RegistryState
                                                                 (Web.Spock.Internal.Wire.ActionCtxT
                                                                    ()
                                                                    (Web.Spock.Internal.Types.WebStateT
                                                                       ()
                                                                       Main.MySession
                                                                       Main.MyAppState
                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                          GHC.Types.IO)))
                                                                 ()
                                                                 Web.Spock.Internal.Wire.SpockMethod,
                                                               [Network.Wai.Application
                                                                -> Network.Wai.Application])>_N)))
                                         (Trans
                                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N
                                                        <Web.Spock.Internal.Types.WebState
                                                           () Main.MySession Main.MyAppState>_R
                                                        <Control.Monad.Trans.Resource.Internal.ResourceT
                                                           GHC.Types.IO>_R
                                                        <((),
                                                          Web.Routing.Router.RegistryState
                                                            (Web.Spock.Internal.Wire.ActionCtxT
                                                               ()
                                                               (Web.Spock.Internal.Types.WebStateT
                                                                  ()
                                                                  Main.MySession
                                                                  Main.MyAppState
                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                     GHC.Types.IO)))
                                                            ()
                                                            Web.Spock.Internal.Wire.SpockMethod,
                                                          [Network.Wai.Application
                                                           -> Network.Wai.Application])>_N))
                                              (Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                                        <()>_N
                                                        <Main.MySession>_N
                                                        <Main.MyAppState>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                GHC.Types.IO>_N <((),
                                                                                                  Web.Routing.Router.RegistryState
                                                                                                    (Web.Spock.Internal.Wire.ActionCtxT
                                                                                                       ()
                                                                                                       (Web.Spock.Internal.Types.WebStateT
                                                                                                          ()
                                                                                                          Main.MySession
                                                                                                          Main.MyAppState
                                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                             GHC.Types.IO)))
                                                                                                    ()
                                                                                                    Web.Spock.Internal.Wire.SpockMethod,
                                                                                                  [Network.Wai.Application
                                                                                                   -> Network.Wai.Application])>_N)))
                               (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                         <*>_N
                                         <Web.Spock.Core.LiftHooked
                                            ()
                                            (Web.Spock.Internal.Types.WebStateT
                                               ()
                                               Main.MySession
                                               Main.MyAppState
                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                  GHC.Types.IO))>_R
                                         <Web.Spock.Internal.Types.WebStateT
                                            ()
                                            Main.MySession
                                            Main.MyAppState
                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                               GHC.Types.IO)>_R
                                         <((),
                                           Web.Routing.Router.RegistryState
                                             (Web.Spock.Internal.Wire.ActionCtxT
                                                ()
                                                (Web.Spock.Internal.Types.WebStateT
                                                   ()
                                                   Main.MySession
                                                   Main.MyAppState
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      GHC.Types.IO)))
                                             ()
                                             Web.Spock.Internal.Wire.SpockMethod,
                                           [Network.Wai.Application
                                            -> Network.Wai.Application])>_N)))
                     (Trans
                          (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                    <Web.Routing.SafeRouting.PathInternal '[]>_R
                                    <[Network.Wai.Application -> Network.Wai.Application]>_N
                                    <Web.Routing.Router.RegistryState
                                       (Web.Spock.Internal.Wire.ActionCtxT
                                          ()
                                          (Web.Spock.Internal.Types.WebStateT
                                             ()
                                             Main.MySession
                                             Main.MyAppState
                                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)))
                                       ()
                                       Web.Spock.Internal.Wire.SpockMethod>_N
                                    <Control.Monad.Trans.Reader.ReaderT
                                       (Web.Spock.Core.LiftHooked
                                          ()
                                          (Web.Spock.Internal.Types.WebStateT
                                             ()
                                             Main.MySession
                                             Main.MyAppState
                                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                                GHC.Types.IO)))
                                       (Web.Spock.Internal.Types.WebStateT
                                          ()
                                          Main.MySession
                                          Main.MyAppState
                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO))>_R
                                    <()>_N))
                          (Nth:3
                               (Nth:3
                                    (Trans
                                         (Sym (Web.Routing.Router.N:RegistryT[0]
                                                   <Web.Spock.Internal.Wire.ActionCtxT
                                                      ()
                                                      (Web.Spock.Internal.Types.WebStateT
                                                         ()
                                                         Main.MySession
                                                         Main.MyAppState
                                                         (Control.Monad.Trans.Resource.Internal.ResourceT
                                                            GHC.Types.IO))>_N
                                                   <()>_N
                                                   <Network.Wai.Application
                                                    -> Network.Wai.Application>_N
                                                   <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                               (Web.Spock.Core.LiftHooked
                                                                                                  ()
                                                                                                  (Web.Spock.Internal.Types.WebStateT
                                                                                                     ()
                                                                                                     Main.MySession
                                                                                                     Main.MyAppState
                                                                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                        GHC.Types.IO)))
                                                                                               (Web.Spock.Internal.Types.WebStateT
                                                                                                  ()
                                                                                                  Main.MySession
                                                                                                  Main.MyAppState
                                                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                     GHC.Types.IO))>_N <()>_N
                                          ->_R Sym (Web.Routing.Router.N:RegistryT[0]
                                                        <Web.Spock.Internal.Wire.ActionCtxT
                                                           ()
                                                           (Web.Spock.Internal.Types.WebStateT
                                                              ()
                                                              Main.MySession
                                                              Main.MyAppState
                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                 GHC.Types.IO))>_N
                                                        <()>_N
                                                        <Network.Wai.Application
                                                         -> Network.Wai.Application>_N
                                                        <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                                    (Web.Spock.Core.LiftHooked
                                                                                                       ()
                                                                                                       (Web.Spock.Internal.Types.WebStateT
                                                                                                          ()
                                                                                                          Main.MySession
                                                                                                          Main.MyAppState
                                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                             GHC.Types.IO)))
                                                                                                    (Web.Spock.Internal.Types.WebStateT
                                                                                                       ()
                                                                                                       Main.MySession
                                                                                                       Main.MyAppState
                                                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                          GHC.Types.IO))>_N <()>_N
                                          ->_R Sym (Web.Routing.Router.N:RegistryT[0]
                                                        <Web.Spock.Internal.Wire.ActionCtxT
                                                           ()
                                                           (Web.Spock.Internal.Types.WebStateT
                                                              ()
                                                              Main.MySession
                                                              Main.MyAppState
                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                 GHC.Types.IO))>_N
                                                        <()>_N
                                                        <Network.Wai.Application
                                                         -> Network.Wai.Application>_N
                                                        <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                                    (Web.Spock.Core.LiftHooked
                                                                                                       ()
                                                                                                       (Web.Spock.Internal.Types.WebStateT
                                                                                                          ()
                                                                                                          Main.MySession
                                                                                                          Main.MyAppState
                                                                                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                             GHC.Types.IO)))
                                                                                                    (Web.Spock.Internal.Types.WebStateT
                                                                                                       ()
                                                                                                       Main.MySession
                                                                                                       Main.MyAppState
                                                                                                       (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                          GHC.Types.IO))>_N <()>_N)
                                         (Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                   <()>_N
                                                   <Web.Spock.Internal.Types.WebStateT
                                                      ()
                                                      Main.MySession
                                                      Main.MyAppState
                                                      (Control.Monad.Trans.Resource.Internal.ResourceT
                                                         GHC.Types.IO)>_N) <()>_N
                                          ->_R Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                        <()>_N
                                                        <Web.Spock.Internal.Types.WebStateT
                                                           ()
                                                           Main.MySession
                                                           Main.MyAppState
                                                           (Control.Monad.Trans.Resource.Internal.ResourceT
                                                              GHC.Types.IO)>_N) <()>_N
                                          ->_R Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                        <()>_N
                                                        <Web.Spock.Internal.Types.WebStateT
                                                           ()
                                                           Main.MySession
                                                           Main.MyAppState
                                                           (Control.Monad.Trans.Resource.Internal.ResourceT
                                                              GHC.Types.IO)>_N) <()>_N)))))) -}
06f9af6662d60a698620affdb687af67
  app1 ::
    Web.Routing.SafeRouting.PathInternal '[]
    -> Web.Routing.Router.RegistryState
         (Web.Spock.Internal.Wire.ActionCtxT
            ()
            (Web.Spock.Internal.Types.WebStateT
               ()
               Main.MySession
               Main.MyAppState
               (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
         ()
         Web.Spock.Internal.Wire.SpockMethod
    -> Web.Spock.Core.LiftHooked
         ()
         (Web.Spock.Internal.Types.WebStateT
            ()
            Main.MySession
            Main.MyAppState
            (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO))
    -> Web.Spock.Internal.Types.WebState
         () Main.MySession Main.MyAppState
    -> GHC.IORef.IORef Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           Web.Routing.Router.RegistryState
             (Web.Spock.Internal.Wire.ActionCtxT
                ()
                (Web.Spock.Internal.Types.WebStateT
                   ()
                   Main.MySession
                   Main.MyAppState
                   (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
             ()
             Web.Spock.Internal.Wire.SpockMethod,
           [Network.Wai.Application -> Network.Wai.Application]) #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U(U,U,U,U(U,U,U,U,U,U,U,U))><L,U><S,U>,
     Unfolding: (\ (r1 :: Web.Routing.SafeRouting.PathInternal '[])
                   (s1 :: Web.Routing.Router.RegistryState
                            (Web.Spock.Internal.Wire.ActionCtxT
                               ()
                               (Web.Spock.Internal.Types.WebStateT
                                  ()
                                  Main.MySession
                                  Main.MyAppState
                                  (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
                            ()
                            Web.Spock.Internal.Wire.SpockMethod)
                   (eta :: Web.Spock.Core.LiftHooked
                             ()
                             (Web.Spock.Internal.Types.WebStateT
                                ()
                                Main.MySession
                                Main.MyAppState
                                (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)))
                   (eta1 :: Web.Spock.Internal.Types.WebState
                              () Main.MySession Main.MyAppState)
                   (eta2 :: GHC.IORef.IORef
                              Control.Monad.Trans.Resource.Internal.ReleaseMap)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Web.Spock.delete3
                        @ '[]
                        @ 'Web.Routing.Combinators.Open
                        @ ()
                        @ ()
                        @ Main.MySession
                        @ Main.MyAppState
                        Data.HVect.$WRNil `cast` (Sym (Data.HVect.N:HasRep[0]) <'[]>_N)
                        Web.Spock.get2
                        Web.Routing.Combinators.$WEmpty
                        Main.app13
                          `cast`
                        (Trans
                             (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                       <Web.Spock.Internal.Wire.RequestInfo ()>_R
                                       <()>_N
                                       <Web.Spock.Internal.Wire.ResponseState>_N
                                       <Web.Spock.Internal.Types.WebStateM
                                          () Main.MySession Main.MyAppState>_R
                                       <Data.Either.Either
                                          Web.Spock.Internal.Wire.ActionInterupt ()>_N))
                             (Trans
                                  (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                            <Web.Spock.Internal.Wire.ActionInterupt>_N
                                            <Control.Monad.Trans.RWS.Strict.RWST
                                               (Web.Spock.Internal.Wire.RequestInfo ())
                                               ()
                                               Web.Spock.Internal.Wire.ResponseState
                                               (Web.Spock.Internal.Types.WebStateM
                                                  () Main.MySession Main.MyAppState)>_R
                                            <()>_N))
                                  (Trans
                                       (Sym (Web.Spock.Internal.Wire.N:ActionCtxT[0]
                                                 <()>_N
                                                 <Web.Spock.Internal.Types.WebStateM
                                                    () Main.MySession Main.MyAppState>_N) <()>_N)
                                       (Sub (Sym (Data.HVect.D:R:HVectElim[0]
                                                      <Web.Spock.Internal.Wire.ActionCtxT
                                                         ()
                                                         (Web.Spock.Internal.Types.WebStateM
                                                            () Main.MySession Main.MyAppState)
                                                         ()>_N))))))
                        r1
                        s1
                        eta
                        eta1
                        eta2
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,,) a1 s' w1 ->
                 case Web.Spock.delete3
                        @ '[Data.Text.Internal.Text]
                        @ 'Web.Routing.Combinators.Open
                        @ ()
                        @ ()
                        @ Main.MySession
                        @ Main.MyAppState
                        Main.app12
                          `cast`
                        (Nth:3
                             (Trans
                                  (Sym (Data.HVect.N:HasRep[0]) <'[]>_N
                                   ->_R <Data.HVect.Rep '[Data.Text.Internal.Text]>_R)
                                  (<Data.HVect.HasRep '[]>_R
                                   ->_R Sym (Data.HVect.N:HasRep[0]) <'[Data.Text.Internal.Text]>_N)))
                        Web.Spock.get2
                        Main.app3
                          `cast`
                        (Web.Routing.Combinators.Path
                           (Data.HVect.D:R:Append[0] <'[Data.Text.Internal.Text]>_N)
                           <'Web.Routing.Combinators.Open>_N)_R
                        Main.app2
                          `cast`
                        (Trans
                             (<Data.Text.Internal.Text>_R
                              ->_R Trans
                                       (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                                 <Web.Spock.Internal.Wire.RequestInfo ()>_R
                                                 <()>_N
                                                 <Web.Spock.Internal.Wire.ResponseState>_N
                                                 <Web.Spock.Internal.Types.WebStateT
                                                    ()
                                                    Main.MySession
                                                    Main.MyAppState
                                                    (Control.Monad.Trans.Resource.Internal.ResourceT
                                                       GHC.Types.IO)>_R
                                                 <Data.Either.Either
                                                    Web.Spock.Internal.Wire.ActionInterupt ()>_N))
                                       (Trans
                                            (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <Web.Spock.Internal.Wire.ActionInterupt>_N
                                                      <Control.Monad.Trans.RWS.Strict.RWST
                                                         (Web.Spock.Internal.Wire.RequestInfo ())
                                                         ()
                                                         Web.Spock.Internal.Wire.ResponseState
                                                         (Web.Spock.Internal.Types.WebStateT
                                                            ()
                                                            Main.MySession
                                                            Main.MyAppState
                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                               GHC.Types.IO))>_R
                                                      <()>_N))
                                            (Sym (Web.Spock.Internal.Wire.N:ActionCtxT[0]
                                                      <()>_N
                                                      <Web.Spock.Internal.Types.WebStateT
                                                         ()
                                                         Main.MySession
                                                         Main.MyAppState
                                                         (Control.Monad.Trans.Resource.Internal.ResourceT
                                                            GHC.Types.IO)>_N) <()>_N)))
                             (Trans
                                  (<Data.Text.Internal.Text>_R
                                   ->_R Sub (Sym (Data.HVect.D:R:HVectElim[0]
                                                      <Web.Spock.Internal.Wire.ActionCtxT
                                                         ()
                                                         (Web.Spock.Internal.Types.WebStateM
                                                            () Main.MySession Main.MyAppState)
                                                         ()>_N)))
                                  (Sub (Sym (Data.HVect.D:R:HVectElim[1]
                                                 <Data.Text.Internal.Text>_N
                                                 <'[]>_N
                                                 <Web.Spock.Internal.Wire.ActionCtxT
                                                    ()
                                                    (Web.Spock.Internal.Types.WebStateM
                                                       () Main.MySession Main.MyAppState)
                                                    ()>_N)))))
                        r1
                        s'
                        eta
                        eta1
                        eta2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild1 { (,,) b1 s'' w' ->
                 (# ipv2,
                    (b1, s'',
                     GHC.Base.++
                       @ (Network.Wai.Application -> Network.Wai.Application)
                       w1
                       w') #) } } } }) -}
c7f69a3310edf225cb9a4f7775f3cd54
  app10 ::
    Web.Routing.Combinators.Path '[] 'Web.Routing.Combinators.Open
  {- Unfolding: (Web.Routing.Combinators.static
                   (GHC.CString.unpackCString# Main.app11)) -}
6c6b4b7cb8c510ad1690c64c2a423d16
  app11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("hello"#) -}
0ff808b37108ed9f9ba2063ba166e1d4
  app12 :: Data.HVect.Rep '[Data.Text.Internal.Text]
  {- HasNoCafRefs,
     Unfolding: (Data.HVect.RCons
                   @ '[Data.Text.Internal.Text]
                   @ '[]
                   @ Data.Text.Internal.Text
                   @~ <'[Data.Text.Internal.Text]>_N
                   Data.HVect.$WRNil) -}
519e05e16447075369abf20e85d80af4
  app13 ::
    Web.Spock.Internal.Wire.RequestInfo ()
    -> Web.Spock.Internal.Wire.ResponseState
    -> Web.Spock.Internal.Types.WebStateT
         ()
         Main.MySession
         Main.MyAppState
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
         (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
          Web.Spock.Internal.Wire.ResponseState, ())
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, True)
                (\ (w :: Web.Spock.Internal.Wire.RequestInfo ())
                   (w1 :: Web.Spock.Internal.Wire.ResponseState) ->
                 Main.$wm1 w1) -}
21f79a416cc483dc07b1dd92b71c837b
  app14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test"#) -}
203e61bef5ea0263e2db37338919762d
  app15 ::
    Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt ()
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ Web.Spock.Internal.Wire.ActionInterupt
                   @ ()
                   Web.Spock.Internal.Wire.ActionDone) -}
8c826d4524c87473f129db72d54a4364
  app16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("text/html; charset=utf-8"#) -}
3cf60e8bcfb1355c4e08a810b61d5752
  app17 ::
    Data.CaseInsensitive.Internal.CI
      Data.ByteString.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.app18 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Text.Encoding.$wencodeUtf8
                        ww1
                        ww2
                        ww3 of dt { Data.ByteString.Internal.PS ipv ipv1 ipv2 ipv3 ->
                 case Data.CaseInsensitive.Internal.$wfoldCaseBS
                        ipv
                        ipv1
                        ipv2
                        ipv3 of dt1 { Data.ByteString.Internal.PS ipv4 ipv5 ipv6 ipv7 ->
                 Data.CaseInsensitive.Internal.CI
                   @ Data.ByteString.Internal.ByteString
                   dt
                   dt1 } } }) -}
5f7536c4544dd763294201f7b1b26e31
  app18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Content-Type"#) -}
693f8cd5ad00452605693fd743f02465
  app2 ::
    Data.Text.Internal.Text
    -> Web.Spock.Internal.Wire.RequestInfo ()
    -> Web.Spock.Internal.Wire.ResponseState
    -> Web.Spock.Internal.Types.WebStateT
         ()
         Main.MySession
         Main.MyAppState
         (Control.Monad.Trans.Resource.Internal.ResourceT GHC.Types.IO)
         (Data.Either.Either Web.Spock.Internal.Wire.ActionInterupt (),
          Web.Spock.Internal.Wire.ResponseState, ())
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,U><L,U> -}
f05dcf36a2b443166528f44e318b520d
  app3 ::
    Web.Routing.Combinators.Path
      (Data.HVect.Append '[] '[Data.Text.Internal.Text])
      'Web.Routing.Combinators.Open
  {- Unfolding: (Web.Routing.Combinators.</>
                   @ '[]
                   @ '[Data.Text.Internal.Text]
                   @ 'Web.Routing.Combinators.Open
                   Main.app10
                   Main.app4) -}
1b7302b5ef3f47042717f58f884d6867
  app4 ::
    Web.Routing.Combinators.Path
      '[Data.Text.Internal.Text] 'Web.Routing.Combinators.Open
  {- Unfolding: (Web.Routing.Combinators.VarCons
                   @ '[Data.Text.Internal.Text]
                   @ 'Web.Routing.Combinators.Open
                   @ Data.Text.Internal.Text
                   @ '[]
                   @~ <'[Data.Text.Internal.Text]>_N
                   Web.Internal.HttpApiData.$fFromHttpApiDataText0
                   Main.app5
                   Web.Routing.Combinators.$WEmpty) -}
a4b2dc5b47c564eec686694316f96a0f
  app5 :: Data.Typeable.Internal.Typeable Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.noinline
                        @ ([GHC.Fingerprint.Type.Fingerprint]
                           -> GHC.Fingerprint.Type.Fingerprint)
                        GHC.Fingerprint.fingerprintFingerprints
                        Main.app7 of dt { GHC.Fingerprint.Type.Fingerprint dt1 dt2 ->
                 (Data.Typeable.Internal.TrTyCon
                    @ *
                    @ Data.Text.Internal.Text
                    dt1
                    dt2
                    Main.app6
                    (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep))
                   `cast`
                 (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Text.Internal.Text>_N) }) -}
ccda6c5535c57ae3035e37aba5f48d66
  app6 :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18070483652579739394##
                   3100934284908830527##
                   Data.Text.Internal.$trModule
                   Data.Text.Internal.$tcText1
                   0#
                   GHC.Types.krep$*) -}
cc4259eddc428ee4ad0b70e0f32a2428
  app7 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Fingerprint.Type.Fingerprint
                   Main.app9
                   Main.app8) -}
c67633eb01cd03b4ee5cad63cac4e8af
  app8 :: [GHC.Fingerprint.Type.Fingerprint]
  {- Unfolding: (GHC.Base.map
                   @ Data.Typeable.Internal.SomeTypeRep
                   @ GHC.Fingerprint.Type.Fingerprint
                   Data.Typeable.Internal.someTypeRepFingerprint
                   (GHC.Types.[] @ Data.Typeable.Internal.SomeTypeRep)) -}
1c1fcd3b62c5eece6072cdf5c0e39b84
  app9 :: GHC.Fingerprint.Type.Fingerprint
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Fingerprint.Type.Fingerprint
                   18070483652579739394##
                   3100934284908830527##) -}
896c59d5507cd956f44fbaa696f34e6b
  app_m4 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.app16 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Data.Text.Encoding.$wencodeUtf8 ww1 ww2 ww3 }) -}
85a335e5041088652175c52fd33b8efd
  app_val3 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.app14 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Data.Text.Encoding.$wencodeUtf8
                        ww1
                        ww2
                        ww3 of wild { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt3 0#) of wild1 {
                   GHC.Types.False
                   -> Data.ByteString.Lazy.Internal.Chunk
                        dt
                        dt1
                        dt2
                        dt3
                        Data.ByteString.Lazy.Internal.Empty
                   GHC.Types.True -> Data.ByteString.Lazy.Internal.Empty } } }) -}
2e7d349522e89937d548962dd6b3ed88
  app_val4 ::
    Network.HTTP.Types.Status.Status
    -> Network.HTTP.Types.Header.ResponseHeaders
    -> Network.Wai.Internal.Response
  {- Arity: 2, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (status :: Network.HTTP.Types.Status.Status)
                   (headers :: Network.HTTP.Types.Header.ResponseHeaders) ->
                 Network.Wai.responseLBS status headers Main.app_val3) -}
e30ecb4b91540c121f70291f443e09dd
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ced77de515e731cb87e3f918d56afb9f
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Text.EDE.eitherParseFile2
                        Text.EDE.Internal.Syntax.defaultSyntax
                        Main.main4
                        s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMutVar#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        Main.main3
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case Web.Spock.Internal.SessionVault.newStmSessionStore2
                        @ Main.MyAppState
                        @ Main.MySession
                        @ ()
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 Web.Spock.Core.runSpock1
                   Main.main2
                   (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    Web.Spock.$wspock
                      @ ()
                      @ Main.MySession
                      @ Main.MyAppState
                      (Main.DummyAppState
                         (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int ipv3)
                           `cast`
                         (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N))
                      Web.Spock.Internal.Types.$WPCNoDatabase
                      (Web.Spock.Internal.Types.SessionCfg
                         @ ()
                         @ Main.MySession
                         @ Main.MyAppState
                         Web.Spock.Config.defaultSessionCfg5
                         Web.Spock.Config.defaultSessionCfg4
                           `cast`
                         (Trans
                              (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                              (Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])))
                         Web.Spock.Config.defaultSessionCfg3
                         GHC.Types.True
                         Main.EmptySession
                         (Web.Spock.Internal.Types.SessionStoreInstance
                            @ (Web.Spock.Internal.Types.Session
                                 () Main.MySession Main.MyAppState)
                            @ GHC.Conc.Sync.STM
                            GHC.Conc.Sync.$fMonadSTM
                            GHC.Conc.Sync.$fFunctorSTM
                            GHC.Conc.Sync.$fApplicativeSTM
                            ipv5)
                         Web.Spock.Config.defaultSessionCfg2
                           `cast`
                         (Trans
                              (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                              (Sym (Data.Time.Clock.Internal.NominalDiffTime.N:NominalDiffTime[0])))
                         (Web.Spock.Config.defaultSessionHooks @ Main.MySession))
                      Web.Spock.Config.defaultSpockCfg6
                      Web.Spock.Config.errorHandler
                      GHC.Types.False
                      Web.Spock.Config.defaultSpockCfg4
                      Web.Spock.Config.defaultSpockCfg2
                      Main.app1
                        `cast`
                      (Trans
                           (<Web.Routing.SafeRouting.PathInternal '[]>_R
                            ->_R <Web.Routing.Router.RegistryState
                                    (Web.Spock.Internal.Wire.ActionCtxT
                                       ()
                                       (Web.Spock.Internal.Types.WebStateT
                                          ()
                                          Main.MySession
                                          Main.MyAppState
                                          (Control.Monad.Trans.Resource.Internal.ResourceT
                                             GHC.Types.IO)))
                                    ()
                                    Web.Spock.Internal.Wire.SpockMethod>_R
                            ->_R Trans
                                     (<Web.Spock.Core.LiftHooked
                                         ()
                                         (Web.Spock.Internal.Types.WebStateT
                                            ()
                                            Main.MySession
                                            Main.MyAppState
                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                               GHC.Types.IO))>_R
                                      ->_R Trans
                                               (<Web.Spock.Internal.Types.WebState
                                                   () Main.MySession Main.MyAppState>_R
                                                ->_R Trans
                                                         (<GHC.IORef.IORef
                                                             Control.Monad.Trans.Resource.Internal.ReleaseMap>_R
                                                          ->_R Sym (GHC.Types.N:IO[0]
                                                                        <((),
                                                                          Web.Routing.Router.RegistryState
                                                                            (Web.Spock.Internal.Wire.ActionCtxT
                                                                               ()
                                                                               (Web.Spock.Internal.Types.WebStateT
                                                                                  ()
                                                                                  Main.MySession
                                                                                  Main.MyAppState
                                                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                     GHC.Types.IO)))
                                                                            ()
                                                                            Web.Spock.Internal.Wire.SpockMethod,
                                                                          [Network.Wai.Application
                                                                           -> Network.Wai.Application])>_R))
                                                         (Sym (Control.Monad.Trans.Resource.Internal.N:ResourceT[0]
                                                                   <GHC.Types.IO>_R
                                                                   <((),
                                                                     Web.Routing.Router.RegistryState
                                                                       (Web.Spock.Internal.Wire.ActionCtxT
                                                                          ()
                                                                          (Web.Spock.Internal.Types.WebStateT
                                                                             ()
                                                                             Main.MySession
                                                                             Main.MyAppState
                                                                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                GHC.Types.IO)))
                                                                       ()
                                                                       Web.Spock.Internal.Wire.SpockMethod,
                                                                     [Network.Wai.Application
                                                                      -> Network.Wai.Application])>_N)))
                                               (Trans
                                                    (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                              <*>_N
                                                              <Web.Spock.Internal.Types.WebState
                                                                 ()
                                                                 Main.MySession
                                                                 Main.MyAppState>_R
                                                              <Control.Monad.Trans.Resource.Internal.ResourceT
                                                                 GHC.Types.IO>_R
                                                              <((),
                                                                Web.Routing.Router.RegistryState
                                                                  (Web.Spock.Internal.Wire.ActionCtxT
                                                                     ()
                                                                     (Web.Spock.Internal.Types.WebStateT
                                                                        ()
                                                                        Main.MySession
                                                                        Main.MyAppState
                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                           GHC.Types.IO)))
                                                                  ()
                                                                  Web.Spock.Internal.Wire.SpockMethod,
                                                                [Network.Wai.Application
                                                                 -> Network.Wai.Application])>_N))
                                                    (Sym (Web.Spock.Internal.Types.N:WebStateT[0]
                                                              <()>_N
                                                              <Main.MySession>_N
                                                              <Main.MyAppState>_N) <Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                      GHC.Types.IO>_N <((),
                                                                                                        Web.Routing.Router.RegistryState
                                                                                                          (Web.Spock.Internal.Wire.ActionCtxT
                                                                                                             ()
                                                                                                             (Web.Spock.Internal.Types.WebStateT
                                                                                                                ()
                                                                                                                Main.MySession
                                                                                                                Main.MyAppState
                                                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                                   GHC.Types.IO)))
                                                                                                          ()
                                                                                                          Web.Spock.Internal.Wire.SpockMethod,
                                                                                                        [Network.Wai.Application
                                                                                                         -> Network.Wai.Application])>_N)))
                                     (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                               <*>_N
                                               <Web.Spock.Core.LiftHooked
                                                  ()
                                                  (Web.Spock.Internal.Types.WebStateT
                                                     ()
                                                     Main.MySession
                                                     Main.MyAppState
                                                     (Control.Monad.Trans.Resource.Internal.ResourceT
                                                        GHC.Types.IO))>_R
                                               <Web.Spock.Internal.Types.WebStateT
                                                  ()
                                                  Main.MySession
                                                  Main.MyAppState
                                                  (Control.Monad.Trans.Resource.Internal.ResourceT
                                                     GHC.Types.IO)>_R
                                               <((),
                                                 Web.Routing.Router.RegistryState
                                                   (Web.Spock.Internal.Wire.ActionCtxT
                                                      ()
                                                      (Web.Spock.Internal.Types.WebStateT
                                                         ()
                                                         Main.MySession
                                                         Main.MyAppState
                                                         (Control.Monad.Trans.Resource.Internal.ResourceT
                                                            GHC.Types.IO)))
                                                   ()
                                                   Web.Spock.Internal.Wire.SpockMethod,
                                                 [Network.Wai.Application
                                                  -> Network.Wai.Application])>_N)))
                           (Trans
                                (Sym (Control.Monad.Trans.RWS.Strict.N:RWST[0]
                                          <Web.Routing.SafeRouting.PathInternal '[]>_R
                                          <[Network.Wai.Application -> Network.Wai.Application]>_N
                                          <Web.Routing.Router.RegistryState
                                             (Web.Spock.Internal.Wire.ActionCtxT
                                                ()
                                                (Web.Spock.Internal.Types.WebStateT
                                                   ()
                                                   Main.MySession
                                                   Main.MyAppState
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      GHC.Types.IO)))
                                             ()
                                             Web.Spock.Internal.Wire.SpockMethod>_N
                                          <Control.Monad.Trans.Reader.ReaderT
                                             (Web.Spock.Core.LiftHooked
                                                ()
                                                (Web.Spock.Internal.Types.WebStateT
                                                   ()
                                                   Main.MySession
                                                   Main.MyAppState
                                                   (Control.Monad.Trans.Resource.Internal.ResourceT
                                                      GHC.Types.IO)))
                                             (Web.Spock.Internal.Types.WebStateT
                                                ()
                                                Main.MySession
                                                Main.MyAppState
                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO))>_R
                                          <()>_N))
                                (Nth:3
                                     (Nth:3
                                          (Trans
                                               (Sym (Web.Routing.Router.N:RegistryT[0]
                                                         <Web.Spock.Internal.Wire.ActionCtxT
                                                            ()
                                                            (Web.Spock.Internal.Types.WebStateT
                                                               ()
                                                               Main.MySession
                                                               Main.MyAppState
                                                               (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                  GHC.Types.IO))>_N
                                                         <()>_N
                                                         <Network.Wai.Application
                                                          -> Network.Wai.Application>_N
                                                         <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                                     (Web.Spock.Core.LiftHooked
                                                                                                        ()
                                                                                                        (Web.Spock.Internal.Types.WebStateT
                                                                                                           ()
                                                                                                           Main.MySession
                                                                                                           Main.MyAppState
                                                                                                           (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                              GHC.Types.IO)))
                                                                                                     (Web.Spock.Internal.Types.WebStateT
                                                                                                        ()
                                                                                                        Main.MySession
                                                                                                        Main.MyAppState
                                                                                                        (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                           GHC.Types.IO))>_N <()>_N
                                                ->_R Sym (Web.Routing.Router.N:RegistryT[0]
                                                              <Web.Spock.Internal.Wire.ActionCtxT
                                                                 ()
                                                                 (Web.Spock.Internal.Types.WebStateT
                                                                    ()
                                                                    Main.MySession
                                                                    Main.MyAppState
                                                                    (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                       GHC.Types.IO))>_N
                                                              <()>_N
                                                              <Network.Wai.Application
                                                               -> Network.Wai.Application>_N
                                                              <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                                          (Web.Spock.Core.LiftHooked
                                                                                                             ()
                                                                                                             (Web.Spock.Internal.Types.WebStateT
                                                                                                                ()
                                                                                                                Main.MySession
                                                                                                                Main.MyAppState
                                                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                                   GHC.Types.IO)))
                                                                                                          (Web.Spock.Internal.Types.WebStateT
                                                                                                             ()
                                                                                                             Main.MySession
                                                                                                             Main.MyAppState
                                                                                                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                                GHC.Types.IO))>_N <()>_N
                                                ->_R Sym (Web.Routing.Router.N:RegistryT[0]
                                                              <Web.Spock.Internal.Wire.ActionCtxT
                                                                 ()
                                                                 (Web.Spock.Internal.Types.WebStateT
                                                                    ()
                                                                    Main.MySession
                                                                    Main.MyAppState
                                                                    (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                       GHC.Types.IO))>_N
                                                              <()>_N
                                                              <Network.Wai.Application
                                                               -> Network.Wai.Application>_N
                                                              <Web.Spock.Internal.Wire.SpockMethod>_N) <Control.Monad.Trans.Reader.ReaderT
                                                                                                          (Web.Spock.Core.LiftHooked
                                                                                                             ()
                                                                                                             (Web.Spock.Internal.Types.WebStateT
                                                                                                                ()
                                                                                                                Main.MySession
                                                                                                                Main.MyAppState
                                                                                                                (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                                   GHC.Types.IO)))
                                                                                                          (Web.Spock.Internal.Types.WebStateT
                                                                                                             ()
                                                                                                             Main.MySession
                                                                                                             Main.MyAppState
                                                                                                             (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                                                GHC.Types.IO))>_N <()>_N)
                                               (Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                         <()>_N
                                                         <Web.Spock.Internal.Types.WebStateT
                                                            ()
                                                            Main.MySession
                                                            Main.MyAppState
                                                            (Control.Monad.Trans.Resource.Internal.ResourceT
                                                               GHC.Types.IO)>_N) <()>_N
                                                ->_R Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                              <()>_N
                                                              <Web.Spock.Internal.Types.WebStateT
                                                                 ()
                                                                 Main.MySession
                                                                 Main.MyAppState
                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                    GHC.Types.IO)>_N) <()>_N
                                                ->_R Sym (Web.Spock.Core.N:SpockCtxT[0]
                                                              <()>_N
                                                              <Web.Spock.Internal.Types.WebStateT
                                                                 ()
                                                                 Main.MySession
                                                                 Main.MyAppState
                                                                 (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                    GHC.Types.IO)>_N) <()>_N))))))
                      w2)
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <Network.Wai.Middleware>_R))
                   ipv4 } } }) -}
a322396d61b55b4f2029ca643fdca5b5
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8080#) -}
cb1e48d6198a7771736d5e6b3e8abd80
  main3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e73e0060bc47452dfea09119bf279a34
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
37c01dde397539c27d488159ff1579ec
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("index.html"#) -}
d7770732dee1e0395fb219d5b6c4e7f6
  main6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
"SPEC/Main $fMonadIOWebStateT _ _ _ @ (ResourceT IO)" [orphan] forall @ conn
                                                                      @ sess
                                                                      @ st
                                                                      (v :: Control.Monad.IO.Class.MonadIO
                                                                              (Control.Monad.Trans.Resource.Internal.ResourceT
                                                                                 GHC.Types.IO))
  Web.Spock.Internal.Types.$fMonadIOWebStateT @ conn
                                              @ sess
                                              @ st
                                              @ (Control.Monad.Trans.Resource.Internal.ResourceT
                                                   GHC.Types.IO)
                                              v
  = Main.$s$fMonadIOWebStateT @ conn @ sess @ st
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

